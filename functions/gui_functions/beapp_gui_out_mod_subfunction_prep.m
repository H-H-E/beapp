function [out_mod_button_list,out_mod_button_geometry,out_mod_ver_geometry,skipline_panel,...
    adv_out_mod_button_list,adv_out_mod_button_geometry,adv_out_mod_ver_geometry] =...
    beapp_gui_out_mod_subfunction_prep (current_sub_panel,grp_proc_info)

% spacer for formatting in supergui
extra_space_line = {{'style','text','string',''}};

switch current_sub_panel
    case 'out_mod_general'
        
        empty_10_cell = cell(10,1);
        empty_10_cell(:) = deal({''});
        
        out_mod_inds = find(ismember(grp_proc_info.beapp_toggle_mods.Module_Output_Type,'out'));
        bw_names = empty_10_cell;
        bw_low_freqs = NaN(10,1);
        bw_high_freqs = NaN(10,1);
        
        bw_names(1:length(grp_proc_info.bw_name),1) = grp_proc_info.bw_name';
        bw_low_freqs(1:length(grp_proc_info.bw_name),1) = grp_proc_info.bw(:,1);
        bw_high_freqs(1:length(grp_proc_info.bw_name),1) = grp_proc_info.bw(:,2);
        
        % create display string based on total frequencies that currently
        % exist
        disp_str_total_freqs = beapp_arr_to_colon_note_string (grp_proc_info.bw_total_freqs);
        
        out_mod_button_list = [{{'style','text','string', 'General Output Module Settings:'}},...
            {{'style','text','string', 'Select Modules to Run Below:'}},...
            {{'style','uitable','data', [grp_proc_info.beapp_toggle_mods.Mod_Names(out_mod_inds),...
            num2cell(grp_proc_info.beapp_toggle_mods.Module_On(out_mod_inds)), ...
            num2cell(grp_proc_info.beapp_toggle_mods.Module_Export_On(out_mod_inds))],'tag','out_mod_sel_table',...
            'ColumnEditable',[false,true,true], 'ColumnName',{'Module','Module On?','Save Module Outputs?'}}},...
            extra_space_line,...
            {{'style','text','string', 'Bandwidth information:'}},...
            {{'style','uitable','data', [bw_names num2cell(bw_low_freqs) num2cell(bw_high_freqs)], 'ColumnEditable',[true,true,true],...
            'ColumnName',{'Band Name', 'Band Low Frequency Bound','Band High Frequency Bound'},...
            'ColumnFormat',{'char','numeric','numeric'},'tag','out_mod_band_table'}},...
            extra_space_line,...
            {{'style','text','string', sprintf(['Frequencies to use in total power (for normalization). Separate ranges with commas' ,'\n',...
            'Def = [1:100], ex. [2:58.3,62.1:100]'])}},{{'style','edit','string',  disp_str_total_freqs,'tag', 'bw_total_freqs_resp'}}];
        out_mod_button_geometry = {1 1 1 1 1 1 1 [.7 .3]};
        out_mod_ver_geometry=  [1 1 2 1 1 6 1 1];
        
        if grp_proc_info.src_data_type ==2 % if event-related data
            out_mod_button_list =[out_mod_button_list , extra_space_line...
                {{'style','text','string',sprintf(['Segment analysis window start time \n relative to event marker in seconds (def: -0.100)'])}},...
                {{'style','text','string',sprintf(['Segment analysis window end time  \n relative to event marker in seconds (def: 0.800)'])}},...
                {{'style','edit','string',num2str(grp_proc_info.evt_analysis_win_start),'tag','evt_analysis_win_start'}},...
                {{'style','edit','string',num2str(grp_proc_info.evt_analysis_win_end),'tag','evt_analysis_win_end'}}];
            out_mod_button_geometry = [out_mod_button_geometry 1 [.5 .5] [.5 .5]];
            out_mod_ver_geometry =  [out_mod_ver_geometry 1 1 1];
        end
        
        skipline_panel ='on';
        
    case 'psd'
        out_mod_button_list = [{{'style','text','string', 'PSD Module Settings:'}},...
            {{'style','text','string', 'Select PSD window type:'}},...
            {{'style','text','string', 'Select PSD interpolation type (def: none):'}},...
            {{'style','popupmenu','string', {'Rectangular','Hanning','Multitaper (rec. 2 seconds or longer)'},...
            'tag','psd_win_typ','Value', grp_proc_info.psd_win_typ+1}},...
            {{'style','popupmenu','string', {'None','Linear','Nearest Neighbor','Piecewise Cubic Spline'},...
            'tag','psd_interp_typ','Value', grp_proc_info.psd_interp_typ}},...
            {{'style','checkbox','string', 'Generate PSD Excel Report?','tag','psd_xls_rep_on','Value',grp_proc_info.beapp_toggle_mods{'psd','Module_Xls_Out_On'}}},...
            extra_space_line,{{'style','pushbutton','string', 'Adv. PSD Settings','CallBack',...
            ['beapp_gui_trigger_adv_settings_panel']}}];
        
        out_mod_button_geometry = {1 [.5 .5] [.5 .5] 1 [.7 .3] };
        out_mod_ver_geometry=  [1 1 1.5 1 1];
        skipline_panel ='on';
        
    case 'itpc'
        out_mod_button_list = [{{'style','text','string', 'ITPC Module Settings:'}},...
            {{'style','text','string', 'Enter ITPC Window Size (in seconds, see guide):'}},...
            {{'style','edit','string', num2str( grp_proc_info.beapp_itpc_params.win_size),'tag','itpc_win_size'}},...
            {{'style','checkbox','string', 'Generate ITPC Excel Report?','tag','itpc_xls_rep_on','Value',grp_proc_info.beapp_toggle_mods{'itpc','Module_Xls_Out_On'}}},...
            extra_space_line,{{'style','pushbutton','string', 'Adv. ITPC Settings','CallBack',...
            ['beapp_gui_trigger_adv_settings_panel']}}];
        
        out_mod_button_geometry = {1 [.5 .5] 1 [.7 .3] };
        out_mod_ver_geometry=  [1 1 1 1];
        skipline_panel ='on';
        
    otherwise
        warndlg (['Output module ' current_panel ' is not yet available in BEAPP']);
        
end

[adv_out_mod_button_list,adv_out_mod_button_geometry,adv_out_mod_ver_geometry] =...
    beapp_gui_adv_out_mod_settings_prep(current_sub_panel,grp_proc_info);
end